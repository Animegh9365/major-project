// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="motion,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.241000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=36,HLS_SYN_FF=352,HLS_SYN_LUT=841,HLS_VERSION=2020_1}" *)

module motion (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in1,
        in2,
        in3,
        in4,
        in5,
        in6,
        in7,
        in8,
        in9,
        in10,
        out1,
        out1_ap_vld,
        out2,
        out2_ap_vld,
        out3,
        out3_ap_vld
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] in1;
input  [31:0] in2;
input  [31:0] in3;
input  [31:0] in4;
input  [31:0] in5;
input  [31:0] in6;
input  [31:0] in7;
input  [31:0] in8;
input  [31:0] in9;
input  [31:0] in10;
output  [31:0] out1;
output   out1_ap_vld;
output  [31:0] out2;
output   out2_ap_vld;
output  [31:0] out3;
output   out3_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out1_ap_vld;
reg out2_ap_vld;
reg out3_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] mult10_fu_135_p2;
reg   [31:0] mult10_reg_352;
wire   [31:0] add3_fu_141_p2;
reg   [31:0] add3_reg_357;
wire  signed [31:0] tmp6_fu_153_p2;
reg  signed [31:0] tmp6_reg_362;
wire    ap_CS_fsm_state2;
wire   [31:0] mult7_fu_171_p2;
reg   [31:0] mult7_reg_372;
wire   [31:0] mult11_fu_176_p2;
reg   [31:0] mult11_reg_377;
wire   [31:0] add2_fu_196_p2;
reg   [31:0] add2_reg_382;
wire  signed [31:0] add_ln27_fu_208_p2;
reg  signed [31:0] add_ln27_reg_387;
wire   [31:0] tmp3_fu_219_p2;
reg   [31:0] tmp3_reg_392;
wire   [31:0] tmp5_fu_231_p2;
reg   [31:0] tmp5_reg_397;
wire   [31:0] add13_fu_242_p2;
reg   [31:0] add13_reg_402;
reg   [28:0] tmp_5_reg_407;
wire    ap_CS_fsm_state3;
wire  signed [31:0] mult10_fu_135_p0;
wire  signed [31:0] mult10_fu_135_p1;
wire  signed [31:0] add3_fu_141_p0;
wire  signed [31:0] add3_fu_141_p1;
wire  signed [31:0] add5_fu_147_p0;
wire  signed [31:0] add5_fu_147_p1;
wire  signed [31:0] tmp6_fu_153_p0;
wire   [31:0] add5_fu_147_p2;
wire  signed [31:0] shl_ln7_fu_159_p0;
wire  signed [31:0] shl_ln7_1_fu_165_p0;
wire  signed [31:0] mult7_fu_171_p0;
wire  signed [31:0] mult7_fu_171_p1;
wire  signed [31:0] mult11_fu_176_p0;
wire  signed [31:0] mult11_fu_176_p1;
wire  signed [31:0] mult13_fu_181_p0;
wire  signed [31:0] mult13_fu_181_p1;
wire  signed [31:0] shl_ln9_fu_186_p0;
wire   [31:0] shl_ln9_fu_186_p2;
wire  signed [31:0] mult4_fu_191_p1;
wire  signed [31:0] add2_fu_196_p0;
wire  signed [31:0] mult4_fu_191_p2;
wire   [31:0] shl_ln7_1_fu_165_p2;
wire   [31:0] shl_ln7_fu_159_p2;
wire   [31:0] add_ln27_1_fu_202_p2;
wire  signed [31:0] tmp3_fu_219_p0;
wire  signed [31:0] tmp_fu_214_p2;
wire  signed [31:0] tmp5_fu_231_p0;
wire  signed [31:0] tmp4_fu_225_p2;
wire  signed [31:0] add_ln39_fu_237_p0;
wire  signed [31:0] add13_fu_242_p0;
wire  signed [31:0] add_ln39_fu_237_p2;
wire  signed [31:0] tmp7_fu_247_p0;
wire   [31:0] tmp7_fu_247_p2;
wire   [31:0] mult13_fu_181_p2;
wire   [31:0] add14_fu_251_p2;
wire  signed [31:0] add6_fu_267_p0;
wire   [31:0] add6_fu_267_p2;
wire   [31:0] add9_fu_278_p2;
wire   [31:0] shf1_fu_282_p2;
wire   [31:0] add_ln37_fu_288_p2;
wire   [31:0] add_ln37_2_fu_292_p2;
wire   [29:0] zext_ln45_fu_305_p1;
wire   [29:0] add_ln46_2_fu_312_p2;
wire   [31:0] add_ln46_fu_308_p2;
wire   [31:0] zext_ln46_fu_318_p1;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add13_reg_402 <= add13_fu_242_p2;
        add2_reg_382 <= add2_fu_196_p2;
        add_ln27_reg_387 <= add_ln27_fu_208_p2;
        mult11_reg_377 <= mult11_fu_176_p2;
        mult7_reg_372 <= mult7_fu_171_p2;
        tmp3_reg_392 <= tmp3_fu_219_p2;
        tmp5_reg_397 <= tmp5_fu_231_p2;
        tmp_5_reg_407 <= {{add14_fu_251_p2[31:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        add3_reg_357 <= add3_fu_141_p2;
        mult10_reg_352 <= mult10_fu_135_p2;
        tmp6_reg_362 <= tmp6_fu_153_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out1_ap_vld = 1'b1;
    end else begin
        out1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out2_ap_vld = 1'b1;
    end else begin
        out2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out3_ap_vld = 1'b1;
    end else begin
        out3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add13_fu_242_p0 = in4;

assign add13_fu_242_p2 = ($signed(add13_fu_242_p0) * $signed(add_ln39_fu_237_p2));

assign add14_fu_251_p2 = (tmp7_fu_247_p2 + mult13_fu_181_p2);

assign add2_fu_196_p0 = in5;

assign add2_fu_196_p2 = ($signed(add2_fu_196_p0) * $signed(mult4_fu_191_p2));

assign add3_fu_141_p0 = in7;

assign add3_fu_141_p1 = in4;

assign add3_fu_141_p2 = ($signed(add3_fu_141_p0) * $signed(add3_fu_141_p1));

assign add5_fu_147_p0 = in10;

assign add5_fu_147_p1 = in10;

assign add5_fu_147_p2 = ($signed(add5_fu_147_p0) * $signed(add5_fu_147_p1));

assign add6_fu_267_p0 = in1;

assign add6_fu_267_p2 = ($signed(add6_fu_267_p0) * $signed(add_ln27_reg_387));

assign add9_fu_278_p2 = (tmp3_reg_392 + mult7_reg_372);

assign add_ln27_1_fu_202_p2 = (in2 + shl_ln7_1_fu_165_p2);

assign add_ln27_fu_208_p2 = (shl_ln7_fu_159_p2 + add_ln27_1_fu_202_p2);

assign add_ln37_2_fu_292_p2 = (32'd200 + shf1_fu_282_p2);

assign add_ln37_fu_288_p2 = (add2_reg_382 + tmp5_reg_397);

assign add_ln39_fu_237_p0 = in8;

assign add_ln39_fu_237_p2 = ($signed(add_ln39_fu_237_p0) + $signed(mult10_reg_352));

assign add_ln46_2_fu_312_p2 = (30'd100 + zext_ln45_fu_305_p1);

assign add_ln46_fu_308_p2 = (add13_reg_402 + mult11_reg_377);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign mult10_fu_135_p0 = in9;

assign mult10_fu_135_p1 = in6;

assign mult10_fu_135_p2 = ($signed(mult10_fu_135_p0) * $signed(mult10_fu_135_p1));

assign mult11_fu_176_p0 = in8;

assign mult11_fu_176_p1 = in6;

assign mult11_fu_176_p2 = ($signed(mult11_fu_176_p0) * $signed(mult11_fu_176_p1));

assign mult13_fu_181_p0 = in8;

assign mult13_fu_181_p1 = in7;

assign mult13_fu_181_p2 = ($signed(mult13_fu_181_p0) * $signed(mult13_fu_181_p1));

assign mult4_fu_191_p1 = in4;

assign mult4_fu_191_p2 = ($signed(shl_ln9_fu_186_p2) - $signed(mult4_fu_191_p1));

assign mult7_fu_171_p0 = in6;

assign mult7_fu_171_p1 = in3;

assign mult7_fu_171_p2 = ($signed(mult7_fu_171_p0) * $signed(mult7_fu_171_p1));

assign out1 = (32'd300 + add6_fu_267_p2);

assign out2 = (add_ln37_fu_288_p2 + add_ln37_2_fu_292_p2);

assign out3 = (add_ln46_fu_308_p2 + zext_ln46_fu_318_p1);

assign shf1_fu_282_p2 = add9_fu_278_p2 << 32'd3;

assign shl_ln7_1_fu_165_p0 = in1;

assign shl_ln7_1_fu_165_p2 = shl_ln7_1_fu_165_p0 << 32'd1;

assign shl_ln7_fu_159_p0 = in1;

assign shl_ln7_fu_159_p2 = shl_ln7_fu_159_p0 << 32'd3;

assign shl_ln9_fu_186_p0 = in4;

assign shl_ln9_fu_186_p2 = shl_ln9_fu_186_p0 << 32'd4;

assign tmp3_fu_219_p0 = in5;

assign tmp3_fu_219_p2 = ($signed(tmp3_fu_219_p0) * $signed(tmp_fu_214_p2));

assign tmp4_fu_225_p2 = (32'd16 + in2);

assign tmp5_fu_231_p0 = in3;

assign tmp5_fu_231_p2 = ($signed(tmp5_fu_231_p0) * $signed(tmp4_fu_225_p2));

assign tmp6_fu_153_p0 = in7;

assign tmp6_fu_153_p2 = ($signed(tmp6_fu_153_p0) + $signed(add5_fu_147_p2));

assign tmp7_fu_247_p0 = in9;

assign tmp7_fu_247_p2 = ($signed(tmp7_fu_247_p0) * $signed(tmp6_reg_362));

assign tmp_fu_214_p2 = (in2 + add3_reg_357);

assign zext_ln45_fu_305_p1 = tmp_5_reg_407;

assign zext_ln46_fu_318_p1 = add_ln46_2_fu_312_p2;

endmodule //motion
